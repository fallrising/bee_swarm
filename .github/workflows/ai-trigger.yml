name: AI Task Trigger

on:
  schedule:
    - cron: '*/30 * * * *'  # 每30分鐘觸發
  issues:
    types: [opened, assigned, labeled]
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  trigger-ai:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install requests pygithub
          
      - name: Set up environment variables
        run: |
          echo "Setting up mock environment variables..."
          echo "CLOUDFLARE_TUNNEL_URL=https://mock-tunnel.example.com" >> $GITHUB_ENV
          echo "PROMETHEUS_URL=http://localhost:9090" >> $GITHUB_ENV
          echo "GRAFANA_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "SLACK_WEBHOOK_URL=https://hooks.slack.com/mock" >> $GITHUB_ENV
          echo "BACKUP_S3_BUCKET=mock-bucket" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=mock-key" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=mock-secret" >> $GITHUB_ENV
          echo "POSTGRES_DB=bee_swarm" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=password" >> $GITHUB_ENV
          
      - name: Check pending tasks
        id: check-tasks
        run: |
          python scripts/check_pending_tasks.py
          echo "has_pending_tasks=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          
      - name: Trigger AI containers
        if: steps.check-tasks.outputs.has_pending_tasks == 'true'
        run: |
          python scripts/trigger_ai_containers.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          
      - name: Notify role assignment
        if: github.event_name == 'issues' && github.event.action == 'assigned'
        run: |
          python scripts/notify_role_assignment.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ASSIGNEE: ${{ github.event.issue.assignee.login }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          
      - name: Handle PR events
        if: github.event_name == 'pull_request'
        run: |
          python scripts/handle_pr_events.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_ACTION: ${{ github.event.action }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          
      - name: Check system health
        run: |
          python scripts/check_system_health.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          
      - name: Update documentation
        if: github.event_name == 'schedule'
        run: |
          python scripts/update_documentation.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          
      - name: Create backup
        if: github.event_name == 'schedule'
        run: |
          python scripts/create_backup.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }} 