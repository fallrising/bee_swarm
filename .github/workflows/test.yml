name: Test Scripts

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install requests pygithub pytest pyyaml
          
      - name: Set up environment variables
        run: |
          echo "Setting up mock environment variables..."
          echo "CLOUDFLARE_TUNNEL_URL=https://mock-tunnel.example.com" >> $GITHUB_ENV
          echo "PROMETHEUS_URL=http://localhost:9090" >> $GITHUB_ENV
          echo "GRAFANA_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "SLACK_WEBHOOK_URL=https://hooks.slack.com/mock" >> $GITHUB_ENV
          echo "BACKUP_S3_BUCKET=mock-bucket" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=mock-key" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=mock-secret" >> $GITHUB_ENV
          echo "POSTGRES_DB=bee_swarm" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=password" >> $GITHUB_ENV
          # 设置 CI 环境标记
          echo "CI_ENVIRONMENT=true" >> $GITHUB_ENV
          
      - name: Run basic tests
        run: |
          python scripts/test_scripts.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CLOUDFLARE_TUNNEL_URL: ${{ env.CLOUDFLARE_TUNNEL_URL }}
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          GRAFANA_URL: ${{ env.GRAFANA_URL }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          BACKUP_S3_BUCKET: ${{ env.BACKUP_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          CI_ENVIRONMENT: ${{ env.CI_ENVIRONMENT }}
          
      - name: Test script syntax
        run: |
          echo "Testing script syntax..."
          
          echo "Testing check_pending_tasks.py syntax..."
          python -m py_compile scripts/check_pending_tasks.py
          
          echo "Testing trigger_ai_containers.py syntax..."
          python -m py_compile scripts/trigger_ai_containers.py
          
          echo "Testing notify_role_assignment.py syntax..."
          python -m py_compile scripts/notify_role_assignment.py
          
          echo "Testing handle_pr_events.py syntax..."
          python -m py_compile scripts/handle_pr_events.py
          
          echo "Testing check_system_health.py syntax..."
          python -m py_compile scripts/check_system_health.py
          
          echo "Testing update_documentation.py syntax..."
          python -m py_compile scripts/update_documentation.py
          
          echo "Testing create_backup.py syntax..."
          python -m py_compile scripts/create_backup.py
          
          echo "Testing validate_config.py syntax..."
          python -m py_compile scripts/validate_config.py
          
          echo "Testing validate_docker_compose.py syntax..."
          python -m py_compile scripts/validate_docker_compose.py
          
          echo "✅ All scripts have valid syntax"
          
      - name: Validate docker-compose.yml
        run: |
          echo "Validating docker-compose.yml..."
          python scripts/validate_docker_compose.py
          
      - name: Check environment variables
        run: |
          echo "Checking environment variables..."
          if [ -f .env.example ]; then
            echo "✅ .env.example exists"
            grep -E "^[A-Z_]+=" .env.example | wc -l | xargs echo "Found environment variables:"
          else
            echo "❌ .env.example not found"
            exit 1
          fi
          
      - name: Check documentation
        run: |
          echo "Checking documentation..."
          if [ -f docs/architecture.md ]; then
            echo "✅ architecture.md exists"
          else
            echo "❌ architecture.md not found"
            exit 1
          fi
          
          if [ -f docs/roles.md ]; then
            echo "✅ roles.md exists"
          else
            echo "❌ roles.md not found"
            exit 1
          fi
          
          if [ -f docs/workflows.md ]; then
            echo "✅ workflows.md exists"
          else
            echo "❌ workflows.md not found"
            exit 1
          fi
          
          if [ -f docs/deployment.md ]; then
            echo "✅ deployment.md exists"
          else
            echo "❌ deployment.md not found"
            exit 1
          fi
          
      - name: Check monitoring configuration
        run: |
          echo "Checking monitoring configuration..."
          if [ -f monitoring/prometheus.yml ]; then
            echo "✅ prometheus.yml exists"
          else
            echo "❌ prometheus.yml not found"
            exit 1
          fi
          
          if [ -f monitoring/grafana/datasources/datasource.yml ]; then
            echo "✅ grafana datasource.yml exists"
          else
            echo "❌ grafana datasource.yml not found"
            exit 1
          fi
          
          if [ -f monitoring/grafana/dashboards/dashboard.yml ]; then
            echo "✅ grafana dashboard.yml exists"
          else
            echo "❌ grafana dashboard.yml not found"
            exit 1
          fi
          
          if [ -f monitoring/grafana/dashboards/bee-swarm-overview.json ]; then
            echo "✅ bee-swarm-overview.json exists"
          else
            echo "❌ bee-swarm-overview.json not found"
            exit 1
          fi 